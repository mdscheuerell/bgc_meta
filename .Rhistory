facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab("day of year") +
ylab("seasonality") +
theme_bw() +
theme(legend.position = "none",
#legend.background = element_rect(fill = NA, color = NA),
#legend.text = element_text(size = 20),
#legend.title = element_text(size = 28),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", linewidth = 2),
plot.margin = unit(c(t = 0.5, r = 0.5, b = 0, l = 0.5), "cm"),
axis.text = element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.title.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size = 30))
seas.sol.pl
## All solutes
seas.sol.pl <- ggplot(SeasDat, aes(y = seas, x = month, color = watershed, linetype = Sig2)) +
geom_line(linewidth = 1.25) +
scale_linetype_manual(values = c("solid", "dashed", "dotted"), name = "Significant coef") +
# scale_x_datetime(date_labels = "%b") +
scale_color_manual(values = cols1) +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab("month") +
ylab("seasonality") +
scale_x_continuous(limits = c(1, 12), expand = c(0, 0)) +
theme_bw() +
theme(legend.position = "none",
#legend.background = element_rect(fill = NA, color = NA),
#legend.text = element_text(size = 20),
#legend.title = element_text(size = 28),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", linewidth = 2),
plot.margin = unit(c(t = 0.5, r = 0.5, b = 0, l = 0.5), "cm"),
axis.text = element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.title.x = element_text(size = 30),
strip.background = element_blank(),
strip.text = element_text(size = 30))
seas.sol.pl
ggsave(seas.sol.pl, path = "plots", file = "seas.sig.pdf", width = 20, height = 10, units = "in")
ggsave(seas.sol.pl, path = "plots", file = "seas.sig.pdf", width = 15, height = 10, units = "in")
## All solutes
seas.sol.pl <- ggplot(SeasDat, aes(y = seas, x = month, color = watershed, linetype = Sig2)) +
geom_line(linewidth = 1.25) +
scale_linetype_manual(values = c("solid", "dashed", "dotted"), name = "Significant coef") +
# scale_x_datetime(date_labels = "%b") +
scale_color_manual(values = cols1) +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab("month") +
ylab("seasonality") +
scale_x_continuous(limits = c(1, 12), expand = c(0, 0)) +
theme_bw() +
theme(legend.position = "none",
#legend.background = element_rect(fill = NA, color = NA),
#legend.text = element_text(size = 20),
#legend.title = element_text(size = 28),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", linewidth = 2),
plot.margin = unit(c(t = 0.5, r = 1, b = 0.5, l = 0.5), "cm"),
axis.text = element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.title.x = element_text(size = 30),
strip.background = element_blank(),
strip.text = element_text(size = 30))
ggsave(seas.sol.pl, path = "plots", file = "seas.sig.pdf", width = 14, height = 10, units = "in")
ggsave(seas.sol.pl, path = "plots", file = "seas.sig.pdf", width = 13, height = 10, units = "in")
## All solutes
seas.sol.pl <- ggplot(SeasDat, aes(y = seas, x = month, color = watershed, linetype = Sig2)) +
geom_line(linewidth = 1.25) +
scale_linetype_manual(values = c("solid", "dashed", "dotted"), name = "Significant coef") +
# scale_x_datetime(date_labels = "%b") +
scale_color_manual(values = cols1) +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab("month") +
ylab("seasonality") +
scale_x_continuous(limits = c(1, 12), expand = c(0, 0)) +
theme_bw() +
theme(legend.position = "none",
#legend.background = element_rect(fill = NA, color = NA),
#legend.text = element_text(size = 20),
#legend.title = element_text(size = 28),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", linewidth = 2),
plot.margin = unit(c(t = 0.5, r = 1.5, b = 0.5, l = 0.5), "cm"),
axis.text = element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.title.x = element_text(size = 30),
strip.background = element_blank(),
strip.text = element_text(size = 30))
ggsave(seas.sol.pl, path = "plots", file = "seas.sig.pdf", width = 13, height = 10, units = "in")
## All solutes
seas.sol.pl <- ggplot(SeasDat, aes(y = seas, x = month, color = watershed, linetype = Sig2)) +
geom_line(linewidth = 1.25) +
scale_linetype_manual(values = c("solid", "dashed", "dotted"), name = "Significant coef") +
# scale_x_datetime(date_labels = "%b") +
scale_color_manual(values = cols1) +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab("month") +
ylab("seasonality") +
scale_x_continuous(limits = c(1, 12), expand = c(0, 0)) +
theme_bw() +
theme(legend.position = "none",
#legend.background = element_rect(fill = NA, color = NA),
#legend.text = element_text(size = 20),
#legend.title = element_text(size = 28),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", linewidth = 2),
plot.margin = unit(c(t = 0.5, r = 1.5, b = 0.5, l = 0.5), "cm"),
axis.text = element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.title.x = element_text(size = 30),
strip.background = element_blank(),
strip.text = element_text(size = 30))
ggsave(seas.sol.pl, path = "plots", file = "seas.sig.pdf", width = 14, height = 10, units = "in")
## Nitrate only
seas.NO3.pl <- SeasDat %>% filter(solute2 == "Nitrate") %>%
ggplot(aes(y = seas, x = month, color = watershed, linetype = Sig2)) +
geom_line(linewidth = 1.25) +
scale_linetype_manual(values = c("solid", "dashed", "dotted"), name = "Significant coef") +
scale_color_manual(values = cols1) +
xlab("month") +
ylab(expression("seasonality of"~NO[3]^{"-"})) +
scale_x_continuous(limits = c(1, 12), expand = c(0, 0)) +
theme_bw() +
theme(legend.position = "right",
legend.background = element_rect(fill = NA, color = NA),
legend.text = element_text(size = 28),
legend.title = element_text(size = 30),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", linewidth = 2),
plot.margin = unit(c(t = 0.5, r = 0.5, b = 0.5, l = 0.5), "cm"),
axis.text = element_text(size = 30),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 30))
ggsave(seas.NO3.pl, path = "plots", file = "seas.NO3.sig.pdf", width = 10, height = 8, units = "in")
ggsave(seas.NO3.pl, path = "plots", file = "seas.NO3.sig.pdf", width = 15, height = 8, units = "in")
## All solutes
seas.sol.pl <- ggplot(SeasDat, aes(y = seas, x = month, color = watershed, linetype = Sig2)) +
geom_line(linewidth = 1.25) +
scale_linetype_manual(values = c("solid", "dashed", "dotted"), name = "Significant coef") +
# scale_x_datetime(date_labels = "%b") +
scale_color_manual(values = cols1) +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab("month") +
ylab("seasonality") +
guides(linetype = "none") +
scale_x_continuous(limits = c(1, 12), expand = c(0, 0)) +
theme_bw() +
theme(legend.position = "none",
#legend.background = element_rect(fill = NA, color = NA),
#legend.text = element_text(size = 20),
#legend.title = element_text(size = 28),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", linewidth = 2),
plot.margin = unit(c(t = 0.5, r = 1.5, b = 0.5, l = 0.5), "cm"),
axis.text = element_text(size = 30),
axis.title.y = element_text(size = 30),
axis.title.x = element_text(size = 30),
strip.background = element_blank(),
strip.text = element_text(size = 30))
## Nitrate only
seas.NO3.pl <- SeasDat %>% filter(solute2 == "Nitrate") %>%
ggplot(aes(y = seas, x = month, color = watershed, linetype = Sig2)) +
geom_line(linewidth = 1.25) +
scale_linetype_manual(values = c("solid", "dashed", "dotted"), name = "Significant coef") +
scale_color_manual(values = cols1) +
xlab("month") +
ylab(expression("seasonality of"~NO[3]^{"-"})) +
scale_x_continuous(limits = c(1, 12), expand = c(0, 0)) +
guides(linetype = "none") +
theme_bw() +
theme(legend.position = "right",
legend.background = element_rect(fill = NA, color = NA),
legend.text = element_text(size = 28),
legend.title = element_text(size = 30),
panel.grid = element_blank(),
panel.border = element_rect(color = "black", linewidth = 2),
plot.margin = unit(c(t = 0.5, r = 0.5, b = 0.5, l = 0.5), "cm"),
axis.text = element_text(size = 30),
axis.title.x = element_text(size = 30),
axis.title.y = element_text(size = 30))
seas.NO3.pl
ggsave(seas.NO3.pl, path = "plots", file = "seas.NO3.sig.pdf", width = 15, height = 8, units = "in")
ggsave(seas.NO3.pl, path = "plots", file = "seas.NO3.sig.pdf", width = 12, height = 8, units = "in")
ggsave(seas.NO3.pl, path = "plots", file = "seas.NO3.sig.pdf", width = 10, height = 8, units = "in")
ggsave(seas.NO3.pl, path = "plots", file = "seas.NO3.sig.pdf", width = 11, height = 8, units = "in")
# libraries
library(tidyverse)
library(trend)
install.packages("trend")
library(trend)
install.packages("trend")
library(trend)
install.packages('trend', dependencies = TRUE)
install.packages("sandwich")
install.packages("strucchange")
install.packages("strucchange")
# libraries ----
library(tidyverse)
library(here)
library(MARSS)
library(ggpubr)
library(lubridate)
library(viridis)
# Timeseries plots ----
TimeSeriesLength <- 408
BlankTS.01 <- as.data.frame(seq(1,TimeSeriesLength, by = 1))
BlankTS.0 <- seq.Date(from = as.Date("1986/11/01"), to = as.Date("2020/10/31"), "months")
BlankTS <- cbind(BlankTS.01, BlankTS.0)
names(BlankTS) <- c("TimeNum", "Date")
# original dataframe ----
yr_first <- 1987 #state estimates start on 11 Oct. 2026
yr_last <- 2020
df <- readr::read_csv(here::here("data", "tbl_solutes_unmanaged_mon_v2.csv")) %>%
filter(dec_water_yr >= yr_first & dec_water_yr <= yr_last)
# Get MARSS models ----
# THE ORDER OF THE MODELS IS: "Ca"  "DOC" "NO3" "SO4" "NH4" "TDP"
# this is unique states model with seasonality and bias
MarsSeasSiteState <- readRDS(file = file.path(here::here("analysis"), "fitted_seas_unique_states_RW_b.rds"))
# Model coefs ----
# run in 04_model_fitting_BiasTerms_1000bootstraps.R
biasBS <- readRDS(file = file.path(here::here("analysis"), "mod_set_site_RW_b_BiasTerms_1000.rds"))
# Assemble states ----
## Calcium ----
Ca <- as.data.frame(t(MarsSeasSiteState[[1]]$states)) %>%
# this is the # of rows in all of these files CAREFUL to change if needed
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1)) %>%
pivot_longer(cols = X.EF_BBWM_EB:X.NW_HJA_GSWS09, names_to = "WA", values_to = "Ca")
Ca.se <- as.data.frame(t(MarsSeasSiteState[[1]]$states.se)) %>%
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1)) %>%
pivot_longer(cols = X.EF_BBWM_EB:X.NW_HJA_GSWS09, names_to = "WA", values_to = "Ca.se")
## DOC ----
DOC <- as.data.frame(t(MarsSeasSiteState[[2]]$states)) %>%
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1)) %>%
pivot_longer(cols = X.EF_BBWM_EB:X.NW_HJA_GSWS09, names_to = "WA", values_to = "DOC")
DOC.se <- as.data.frame(t(MarsSeasSiteState[[2]]$states.se))%>%
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1))%>%
pivot_longer(cols = X.EF_BBWM_EB:X.NW_HJA_GSWS09, names_to = "WA", values_to = "DOC.se")
## Nitrate -N
NO3N <- as.data.frame(t(MarsSeasSiteState[[3]]$states)) %>%
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1)) %>%
pivot_longer(cols = X.EF_BBWM_EB:X.NW_HJA_GSWS09, names_to = "WA", values_to = "NO3N")
NO3N.se <- as.data.frame(t(MarsSeasSiteState[[3]]$states.se))%>%
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1)) %>%
pivot_longer(cols = X.EF_BBWM_EB:X.NW_HJA_GSWS09, names_to = "WA", values_to = "NO3N.se")
## Sulfate ----
SO4 <- as.data.frame(t(MarsSeasSiteState[[4]]$states)) %>%
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1)) %>%
pivot_longer(cols = X.EF_BBWM_EB:X.NW_HJA_GSWS09, names_to = "WA", values_to = "SO4")
SO4.se <- as.data.frame(t(MarsSeasSiteState[[4]]$states.se))%>%
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1))%>%
pivot_longer(cols = X.EF_BBWM_EB:X.NW_HJA_GSWS09, names_to = "WA", values_to = "SO4.se")
## NH4-N
NH4N <- as.data.frame(t(MarsSeasSiteState[[5]]$states)) %>%
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1)) %>%
pivot_longer(cols = X.NF_DOR_HP3:X.NF_TLW_C38, names_to = "WA", values_to = "NH4N")
NH4N.se <- as.data.frame(t(MarsSeasSiteState[[5]]$states.se)) %>%
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1))%>%
pivot_longer(cols = X.NF_DOR_HP3:X.NF_TLW_C38, names_to = "WA", values_to = "NH4N.se")
## TDP
TDP <- as.data.frame(t(MarsSeasSiteState[[6]]$states)) %>%
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1)) %>%
pivot_longer(cols = X.NF_DOR_HP3:X.NW_HJA_GSWS09, names_to = "WA", values_to = "TDP")
TDP.se <- as.data.frame(t(MarsSeasSiteState[[6]]$states.se))%>%
mutate(TimeNum = seq(1,TimeSeriesLength, by = 1))%>%
pivot_longer(cols = X.NF_DOR_HP3:X.NW_HJA_GSWS09, names_to = "WA", values_to = "TDP.se")
## Bring dataframes together ----
# "Ca"  "DOC" "NO3" "SO4" "NH4" "TDP"
states0.s <- Ca %>%
full_join(DOC, by = c("TimeNum", "WA"))%>%
full_join(NO3N, by = c("TimeNum", "WA"))%>%
full_join(SO4, by = c("TimeNum", "WA"))%>%
full_join(NH4N, by = c("TimeNum", "WA"))%>%
full_join(TDP, by = c("TimeNum", "WA")) %>%
pivot_longer(cols = Ca:TDP, names_to =  "solute", values_to = "states")
states0.se <-   Ca.se %>%
full_join(DOC.se, by = c("TimeNum", "WA"))%>%
full_join(NO3N.se, by = c("TimeNum", "WA"))%>%
full_join(SO4.se, by = c("TimeNum", "WA"))%>%
full_join(NH4N.se, by = c("TimeNum", "WA"))%>%
full_join(TDP.se, by = c("TimeNum", "WA")) %>%
pivot_longer(cols = Ca.se:TDP.se, names_to =  "solute", values_to = "states.se") %>%
mutate_at("solute", str_replace, ".se","")
states <- states0.s %>%
full_join(states0.se, by = c("TimeNum", "WA", "solute")) %>%
separate(WA, sep = "_", into= c("region", "site", "watershed")) %>%
mutate_at("region", str_replace, "X.", "") %>%
mutate_at(c("region", "site", "watershed"), factor)  %>%
full_join(BlankTS, by = "TimeNum") %>%
mutate(Date = as.POSIXct(Date, format = "%Y-%m-%d"),
watershed = fct_relevel(watershed,
# BBWM
"EB",
# DOR
"HP3",    "HP3A",   "HP4",    "HP5",    "HP6",    "HP6A",
# ELA
"EIF",    "NEIF",   "NWIF",
# HBEF
"WS6",    "WS7",    "WS8",    "WS9",
# MEF
"S2",     "S5",
# SLP
"W9",
# TLW
"C32",    "C35",    "C38",
# HJA
"GSWS08", "GSWS09"),
site = fct_relevel(site, "BBWM", "DOR",  "ELA",  "HBEF", "MEF",  "SLP",  "TLW", "HJA")) %>%
# making catchment/watershed consistent across df's
rename(catchment = "watershed")
SiteList <- states %>% select(site, catchment) %>% distinct()
# List of sites with no state data
SitesSol_Deleted <- states %>%
select(site, catchment, states, solute) %>%
filter(is.na(states)) %>%
distinct() %>%
mutate(SiteCatchSol = paste0(site, "_", catchment, "_", solute)) %>%
select(SiteCatchSol)
# these have state predictions, but there was no data - remove
StatePredNoDat <- as.data.frame(c("TLW_C32_NH4N", "TLW_C35_NH4N", "HBEF_WS6_NH4N", "HBEF_WS6_NO3N"))
names(StatePredNoDat) <- c("SiteCatchSol")
SitesSol_Deleted <- rbind(SitesSol_Deleted,StatePredNoDat)
# remove catchments-solutes with no data
states2 <- states %>%
mutate(SiteCatchSol = paste0(site, "_", catchment, "_", solute)) %>%
filter(!(SiteCatchSol %in% SitesSol_Deleted$SiteCatchSol)) %>%
# clip last year of predictions
filter(Date < as.POSIXct("2019-10-01 00:00:00", format = "%Y-%m-%d %H:%M:%S"))
# NOTE-this doesn't change the number of rows, because it doesn't delete any catchments, only Na's things in solute columns
df2 <- df %>%
pivot_longer(cols = Ca:TDP, names_to = "solute", values_to = "FWMC") %>%
mutate(SiteCatchSol = paste0(site, "_", catchment, "_", solute)) %>%
# filter((SiteCatchSol %in% SitesSol_Deleted$SiteCatchSol))
filter(!(SiteCatchSol %in% SitesSol_Deleted$SiteCatchSol)) %>%
pivot_wider(id_cols = region:dec_water_yr, names_from = solute, values_from = FWMC)%>%
# convert to posix.ct then adjust from water years (start oct) to normal years
mutate(pdt = lubridate::date_decimal(dec_water_yr)-91*24*60*60) %>%
mutate(watershed = fct_relevel(catchment,
# BBWM
"EB",
# DOR
"HP3",    "HP3A",   "HP4",    "HP5",    "HP6",    "HP6A",
# ELA
"EIF",    "NEIF",   "NWIF",
# HBEF
"WS6",    "WS7",    "WS8",    "WS9",
# MEF
"S2",     "S5",
# SLP
"W9",
# TLW
"C32",    "C35",    "C38",
# HJA
"GSWS08", "GSWS09"),
site = fct_relevel(site, "BBWM", "DOR",  "ELA",  "HBEF", "MEF",  "SLP",  "TLW", "HJA"))
# table of distinct catchments and sites
DistinctCatchments <- states %>% select(site, catchment) %>% distinct()
# list of solutes
SoluteList <- unique(states$solute)
# Global color palette for figs
cols1 <- c(
"#fde725", # yellow-BBWM
"#05d5f5", "#6eb5db", "#aad6f0", "#0367a1", "#0505f7", "#084ec7", # blue-DOR
"#7f039e", "#8507fa", "#7b54a1",   # purple-ELA
"#1e5920", "#5ec962", "#029e07", "#07f0b2", # green-HBEF
"#35528b", "#c392f0", # lavender-MEF
"#21918c", # teal-SLP
"#f51505", "#f0079a", "#f095ce", # red-TLW
"orange red", "#f5965f" # orange-HJA
)
# Fancy labels with units
State_fancyYaxisLabels <- c(expression(paste("Scaled volume-weighted", Ca^'2+', "concentration")),
expression(paste("Scaled volume-weighted DOC concentration")),
expression(paste("Scaled volume-weighted ", NO[3]^'-', "-N", " concentration")),
expression(paste("Scaled volume-weighted ",SO[4]^'2-', " concentration")),
expression(paste("Scaled volume-weighted ",NH[4]^'+', "-N concentration")),
expression(paste("Scaled volume-weighted TDP concentration")))
## FIG 4 States timeseries ----
for(i in 1:length(SoluteList)){
SoluteList_i <- SoluteList[i]
# SoluteList_i <- SoluteList[6]
State_fancyYaxisLabels_i <- State_fancyYaxisLabels[i]
TestPlot_i <- ggplot() +
geom_point(data = df2 %>%
# log data
mutate(across(Ca:TDP,log)) %>%
# need to center each timeseries individually
group_by(catchment) %>%
# center
mutate(across(Ca:TDP, scale, scale = FALSE)) %>%
rename(NO3N = NO3, NH4N = NH4) %>%
select(site, catchment, pdt, !!SoluteList_i) %>%
# drop the sites with no data for this solute, in conj w state2 filters
filter(!is.na(.data[[SoluteList_i]])) %>%
droplevels(),
aes(y = .data[[SoluteList_i]], x = pdt), color = "grey", shape = 1) +
geom_line( data = states2 %>%
filter(solute == SoluteList_i) %>%
# drop the sites with no data for this solute, in conj w df2 filters
filter(!is.na(!!SoluteList_i)) %>%
droplevels(), aes(y = states, x = Date, color = catchment)) +
geom_ribbon(data = states2 %>%
filter(solute == SoluteList_i) %>%
# drop the sites with no data for this solute, in conj w df2 filters
filter(!is.na(!!SoluteList_i)) %>%
droplevels(), aes(ymin = states - states.se,
ymax = states + states.se,
x = Date, fill= catchment),
alpha = 0.25, color = "transparent") +
scale_color_manual(values = cols1, name = "Catchment") +
# , guides(color = guide_legend("Catchment"),
#          fill = guide_legend("Catchment"))
scale_fill_manual(values = cols1, name = "Catchment") +
facet_grid(site ~., scales = "free_y") +
theme_bw() +
# this needs to be fixed once stack exchange comes online
ylab(State_fancyYaxisLabels_i) +
# ylab(expression(paste("Volume-weighted ", !!SoluteList_i," concentration (mg ",L^-1,")"))) +
# ylab(paste("Volume-weighted ", SoluteList_i," concentration (mg/L)")) +
xlab(NULL) +
scale_x_datetime(date_labels = "%Y", date_breaks = "5 years") + #, limits = c(1985,2020)
# scale_y_continuous(breaks = c(-7.5, 0, 7.5), limits = c(-7.5,7.5)) +
theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
panel.grid.minor = element_blank(),
panel.spacing = unit(1,"lines"))
ggsave(TestPlot_i, path = "plots", file = paste0("MARSSStatePlots_",SoluteList_i,".png"), width = 11, height = 9, units = "in")
}
# Fancy labels with units
State_fancyYaxisLabels <- c(expression(paste("Scaled volume-weighted ", Ca^'2+', " concentration")),
expression(paste("Scaled volume-weighted DOC concentration")),
expression(paste("Scaled volume-weighted ", NO[3]^'-', "-N", " concentration")),
expression(paste("Scaled volume-weighted ",SO[4]^'2-', " concentration")),
expression(paste("Scaled volume-weighted ",NH[4]^'+', "-N concentration")),
expression(paste("Scaled volume-weighted TDP concentration")))
## FIG 4 States timeseries ----
for(i in 1:length(SoluteList)){
SoluteList_i <- SoluteList[i]
# SoluteList_i <- SoluteList[6]
State_fancyYaxisLabels_i <- State_fancyYaxisLabels[i]
TestPlot_i <- ggplot() +
geom_point(data = df2 %>%
# log data
mutate(across(Ca:TDP,log)) %>%
# need to center each timeseries individually
group_by(catchment) %>%
# center
mutate(across(Ca:TDP, scale, scale = FALSE)) %>%
rename(NO3N = NO3, NH4N = NH4) %>%
select(site, catchment, pdt, !!SoluteList_i) %>%
# drop the sites with no data for this solute, in conj w state2 filters
filter(!is.na(.data[[SoluteList_i]])) %>%
droplevels(),
aes(y = .data[[SoluteList_i]], x = pdt), color = "grey", shape = 1) +
geom_line( data = states2 %>%
filter(solute == SoluteList_i) %>%
# drop the sites with no data for this solute, in conj w df2 filters
filter(!is.na(!!SoluteList_i)) %>%
droplevels(), aes(y = states, x = Date, color = catchment)) +
geom_ribbon(data = states2 %>%
filter(solute == SoluteList_i) %>%
# drop the sites with no data for this solute, in conj w df2 filters
filter(!is.na(!!SoluteList_i)) %>%
droplevels(), aes(ymin = states - states.se,
ymax = states + states.se,
x = Date, fill= catchment),
alpha = 0.25, color = "transparent") +
scale_color_manual(values = cols1, name = "Catchment") +
# , guides(color = guide_legend("Catchment"),
#          fill = guide_legend("Catchment"))
scale_fill_manual(values = cols1, name = "Catchment") +
facet_grid(site ~., scales = "free_y") +
theme_bw() +
# this needs to be fixed once stack exchange comes online
ylab(State_fancyYaxisLabels_i) +
# ylab(expression(paste("Volume-weighted ", !!SoluteList_i," concentration (mg ",L^-1,")"))) +
# ylab(paste("Volume-weighted ", SoluteList_i," concentration (mg/L)")) +
xlab(NULL) +
scale_x_datetime(date_labels = "%Y", date_breaks = "5 years") + #, limits = c(1985,2020)
# scale_y_continuous(breaks = c(-7.5, 0, 7.5), limits = c(-7.5,7.5)) +
theme(axis.title = element_text(size = 20),
axis.text = element_text(size = 12),
strip.text = element_text(size = 12),
panel.grid.minor = element_blank(),
panel.spacing = unit(1,"lines"))
ggsave(TestPlot_i, path = "plots", file = paste0("MARSSStatePlots_",SoluteList_i,".png"), width = 11, height = 9, units = "in")
}
library(Rcpp)
registerPlugin("flibs", Rcpp.plugin.maker(libs = "$(FLIBS)"))
sourceCpp(code = '
#ifdef _OPENMP
# include <omp.h>
#endif
#include <Rcpp.h>
// [[Rcpp::plugins(flibs)]]
// [[Rcpp::export]]
void omp_test()
{
#ifdef _OPENMP
Rprintf("OpenMP threads available: %d\\n", omp_get_max_threads());
#else
Rprintf("OpenMP not supported\\n");
#endif
return;
}
')
install.packages("trend", dependencies = TRUE)
install.packages("trend")
library(trends)
