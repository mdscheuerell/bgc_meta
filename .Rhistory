geom_pointrange(data = MARSS_BiasCoefs2, aes(y = U_perChange_y, x = watershed, color = site,
ymin = U_perChange_y_lowCI,
ymax = U_perChange_y_upCI,
shape = Sig2)) +
facet_grid(solute ~., scales = "free_y") +
theme(axis.text.x = element_text(angle = 90)) +
ylab(expression(paste("Bias ± 95% CI (% change ", y^-1,")"))) +
geom_hline(yintercept = 0)
dev.off()
png(file = file.path(here::here("plots"), "MARSS_BiasPlots.png"), units="in", width= 8, height=6, res=300)
ggplot() +
geom_hline(yintercept = 0) +
geom_pointrange(data = MARSS_BiasCoefs2, aes(y = U_perChange_y, x = watershed, color = site,
ymin = U_perChange_y_lowCI,
ymax = U_perChange_y_upCI,
shape = Sig2)) +
facet_grid(solute ~., scales = "free_y") +
theme(axis.text.x = element_text(angle = 90)) +
ylab(expression(paste("Bias ± 95% CI (% change ", y^-1,")")))
dev.off()
save.image("analysis/07_JMHplots_Rdat")
# FUCTIONS TO BUILD SEASONAL DATASET
# https://stackoverflow.com/questions/24384179/how-to-determine-whether-two-variables-have-the-same-sign-in-r/24384436
SigFun <- function(a,b) {ifelse(a == 0 | b == 0,"FALSE",!xor(sign(a)+1,sign(b)+1))}
# for the models with site states
SeasDatFun.Site <- function(MarsMod, SitesList){
# for testing
# MarsMod <- MarsSeasSiteStateB[[1]]
Modpar <- MARSSparamCIs(MarsMod, method = "hessian", alpha = 0.05, nboot = 1000)
ModCcoefs <- data.frame(coefs = as.factor(as.character(row.names(Modpar$par$U))),
C = Modpar$par$U,
Lci = Modpar$par.lowCI$U,
Uci = Modpar$par.upCI$U) %>%
filter(str_detect(coefs, "seas")) %>%
mutate(coefs = str_replace_all(coefs, "[(]",""),
coefs = str_replace_all(coefs, "[)]",""),
coefs = str_replace_all(coefs, "C.","")) %>%
separate(coefs, into = c("sites", "seas"), sep = ",") %>%
mutate(sites = fct_relevel(sites, SitesList)) %>%
mutate(Sig = SigFun(Lci, Uci)) %>%
pivot_wider(id_cols = sites, names_from = seas, values_from = C:Sig) %>%
mutate(Sig = paste0(Sig_seas_1, "_", Sig_seas_2),
Sig2 = ifelse(Sig == "FALSE_FALSE", "no",
ifelse(Sig == "TRUE_FALSE" | Sig == "FALSE_TRUE", "one",
ifelse(Sig == "TRUE_TRUE", "both", "blah"))))
}
# for models with catchment (unique) states
SeasDatFun.Unique <- function(MarsMod, SitesList){
# for testing
# MarsMod <- SeasUniqState[[6]]
# SitesList <- SitesList_Not4Tdp
Modpar <- MARSSparamCIs(MarsMod, method = "hessian", alpha = 0.05, nboot = 1000)
ModCcoefs <- data.frame(coefs = as.factor(as.character(row.names(Modpar$par$U))),
C = Modpar$par$U,
Lci = Modpar$par.lowCI$U,
Uci = Modpar$par.upCI$U) %>%
filter(str_detect(coefs, "seas")) %>%
mutate(coefs = str_replace_all(coefs, "[(]",""),
coefs = str_replace_all(coefs, "[)]",""),
coefs = str_replace_all(coefs, "X.","")) %>%
separate(coefs, into = c("sites", "seas"), sep = ",") %>%
separate(sites, into = c("region", "sites", "catchment"), sep = "_") %>%
mutate(sites = fct_relevel(sites, SitesList)) %>%
mutate(Sig = SigFun(Lci, Uci)) %>%
pivot_wider(id_cols = region:catchment, names_from = seas, values_from = C:Sig) %>%
mutate(Sig = paste0(Sig_seas_1, "_", Sig_seas_2),
Sig2 = ifelse(Sig == "FALSE_FALSE", "no",
ifelse(Sig == "TRUE_FALSE" | Sig == "FALSE_TRUE", "one",
ifelse(Sig == "TRUE_TRUE", "both", "blah"))))
}
# FUNCTIONS TO GENERATE TIME SERIES FOR PLOTING
# for sites
seasPlotFun.Site <- function(periodS, MarsDF, solute){
# set up sin and cos matrix
# periodS <- 12# TEST
PeriodStart <- 1
PeriodEnd <- periodS
monthNum <- seq(PeriodStart, PeriodEnd, by = 1)
#seas_1 is sin; seas_2 is cos
cos.t <- cos(2 * pi * monthNum/periodS)
sin.t <- sin(2 * pi * monthNum/periodS)
#sin is seas_1, cos is seas_2
c.Four <- rbind(sin.t, cos.t) # if these get switched in C output they have to be switched
# MarsDF <- Seas.Ca # TEST
coefs <- as.matrix(MarsDF[,c("C_seas_1", "C_seas_2")])
# calculate seasonality
seas.F <- coefs %*% c.Four
seas.F.df <- as.data.frame(t(seas.F))
colnames(seas.F.df) <- MarsDF$sites
seas.F.df$month <- monthNum
# Prepare and export data frame
seas.F.df2 <- seas.F.df %>%
pivot_longer(cols = -month, names_to = "sites", values_to = "seas") %>%
left_join(MarsDF %>%
select(sites,Sig2), by = c("sites")) %>%
mutate(solute = solute)
seas.F.df2
}
# For catchments
seasPlotFun.Unique <- function(periodS, MarsDF, solute){
# set up sin and cos matrix
periodS <- 12# TEST
PeriodStart <- 1
PeriodEnd <- periodS
monthNum <- seq(PeriodStart, PeriodEnd, by = 1)
#seas_1 is sin; seas_2 is cos
cos.t <- cos(2 * pi * monthNum/periodS)
sin.t <- sin(2 * pi * monthNum/periodS)
#sin is seas_1, cos is seas_2
c.Four <- rbind(sin.t, cos.t) # if these get switched in C output they have to be switched
MarsDF <- Seas.SO4.Unique # TEST
coefs <- as.matrix(MarsDF[,c("C_seas_1", "C_seas_2")])
# calculate seasonality
seas.F <- coefs %*% c.Four
seas.F.df <- as.data.frame(t(seas.F))
colnames(seas.F.df) <- MarsDF$catchment
seas.F.df$month <- monthNum
# Prepare and export data frame
seas.F.df2 <- seas.F.df %>%
pivot_longer(cols = -month, names_to = "catchment", values_to = "seas") %>%
left_join(MarsDF %>%
select(catchment, sites,Sig2), by = c("catchment")) %>%
mutate(solute = solute)
seas.F.df2
}
# PREPARE DATASETS
SitesList_Not4Tdp <- levels(states$site)
SitesList_Not4Tdp
# c("BBWM","HBEF","MEF","TLW","DOR","ELA","HJA")
SitesList_4Tdp <- c("HBEF","MEF","TLW","DOR","ELA","HJA")
Seas.Ca <- SeasDatFun.Site(MarsSeasSiteState[[1]], SitesList_Not4Tdp)
Seas.Ca.df <- seasPlotFun.Site(12, Seas.Ca, "Ca")
# for testing
MarsMod <- MarsSeasSiteStateB[[1]]
# for testing
MarsMod <- MarsMod[[1]]
# for testing
MarsMod <- MarsSeasSiteState[[1]]
str(MarsMod)
str(Modpar$par)
Modpar <- MARSSparamCIs(MarsMod, method = "hessian", alpha = 0.05, nboot = 1000)
head(Modpar)
str(Modpar)
head(data.frame(coefs = as.factor(as.character(row.names(Modpar$par$U))),
C = Modpar$par$U,
Lci = Modpar$par.lowCI$U,
Uci = Modpar$par.upCI$U) )
Modpar$par$U
head(data.frame(coefs = as.factor(as.character(row.names(Modpar$par$U))),
C = Modpar$par$U,
Lci = Modpar$par.lowCI$U,
Uci = Modpar$par.upCI$U))
SigFun
ModCcoefs <- data.frame(coefs = as.factor(as.character(row.names(Modpar$par$U))),
C = Modpar$par$U,
Lci = Modpar$par.lowCI$U,
Uci = Modpar$par.upCI$U) %>%
filter(str_detect(coefs, "seas")) %>%
mutate(coefs = str_replace_all(coefs, "[(]",""),
coefs = str_replace_all(coefs, "[)]",""),
coefs = str_replace_all(coefs, "X.","")) %>%
separate(coefs, into = c("sites", "seas"), sep = ",") %>%
separate(sites, into = c("region", "sites", "catchment"), sep = "_") %>%
mutate(sites = fct_relevel(sites, SitesList)) %>%
mutate(Sig = SigFun(Lci, Uci)) %>%
pivot_wider(id_cols = region:catchment, names_from = seas, values_from = C:Sig) %>%
mutate(Sig = paste0(Sig_seas_1, "_", Sig_seas_2),
Sig2 = ifelse(Sig == "FALSE_FALSE", "no",
ifelse(Sig == "TRUE_FALSE" | Sig == "FALSE_TRUE", "one",
ifelse(Sig == "TRUE_TRUE", "both", "blah"))))
SitesList
SitesList <- SitesList_Not4Tdp
ModCcoefs <- data.frame(coefs = as.factor(as.character(row.names(Modpar$par$U))),
C = Modpar$par$U,
Lci = Modpar$par.lowCI$U,
Uci = Modpar$par.upCI$U) %>%
filter(str_detect(coefs, "seas")) %>%
mutate(coefs = str_replace_all(coefs, "[(]",""),
coefs = str_replace_all(coefs, "[)]",""),
coefs = str_replace_all(coefs, "X.","")) %>%
separate(coefs, into = c("sites", "seas"), sep = ",") %>%
separate(sites, into = c("region", "sites", "catchment"), sep = "_") %>%
mutate(sites = fct_relevel(sites, SitesList)) %>%
mutate(Sig = SigFun(Lci, Uci)) %>%
pivot_wider(id_cols = region:catchment, names_from = seas, values_from = C:Sig) %>%
mutate(Sig = paste0(Sig_seas_1, "_", Sig_seas_2),
Sig2 = ifelse(Sig == "FALSE_FALSE", "no",
ifelse(Sig == "TRUE_FALSE" | Sig == "FALSE_TRUE", "one",
ifelse(Sig == "TRUE_TRUE", "both", "blah"))))
head(ModCcoefs)
# for models with catchment (unique) states
SeasDatFun.Unique <- function(MarsMod, SitesList){
# for testing
# MarsMod <- SeasUniqState[[6]]
# SitesList <- SitesList_Not4Tdp
Modpar <- MARSSparamCIs(MarsMod, method = "hessian", alpha = 0.05, nboot = 1000)
ModCcoefs <- data.frame(coefs = as.factor(as.character(row.names(Modpar$par$U))),
C = Modpar$par$U,
Lci = Modpar$par.lowCI$U,
Uci = Modpar$par.upCI$U) %>%
filter(str_detect(coefs, "seas")) %>%
mutate(coefs = str_replace_all(coefs, "[(]",""),
coefs = str_replace_all(coefs, "[)]",""),
coefs = str_replace_all(coefs, "X.","")) %>%
separate(coefs, into = c("sites", "seas"), sep = ",") %>%
separate(sites, into = c("region", "sites", "catchment"), sep = "_") %>%
mutate(sites = fct_relevel(sites, SitesList)) %>%
mutate(Sig = SigFun(Lci, Uci)) %>%
pivot_wider(id_cols = region:catchment, names_from = seas, values_from = C:Sig) %>%
mutate(Sig = paste0(Sig_seas_1, "_", Sig_seas_2),
Sig2 = ifelse(Sig == "FALSE_FALSE", "no",
ifelse(Sig == "TRUE_FALSE" | Sig == "FALSE_TRUE", "one",
ifelse(Sig == "TRUE_TRUE", "both", "blah"))))
}
Seas.Ca <- SeasDatFun.Unique(MarsSeasSiteState[[1]], SitesList_Not4Tdp)
head(Seas.Ca)
Seas.Ca.df <- seasPlotFun.Site(12, Seas.Ca, "Ca")
head(Seas.Ca.df)
Seas.Ca.df <- seasPlotFun.Unique(12, Seas.Ca, "Ca")
# For catchments
seasPlotFun.Unique <- function(periodS, MarsDF, solute){
# set up sin and cos matrix
periodS <- 12# TEST
PeriodStart <- 1
PeriodEnd <- periodS
monthNum <- seq(PeriodStart, PeriodEnd, by = 1)
#seas_1 is sin; seas_2 is cos
cos.t <- cos(2 * pi * monthNum/periodS)
sin.t <- sin(2 * pi * monthNum/periodS)
#sin is seas_1, cos is seas_2
c.Four <- rbind(sin.t, cos.t) # if these get switched in C output they have to be switched
MarsDF <- Seas.SO4.Unique # TEST
coefs <- as.matrix(MarsDF[,c("C_seas_1", "C_seas_2")])
# calculate seasonality
seas.F <- coefs %*% c.Four
seas.F.df <- as.data.frame(t(seas.F))
colnames(seas.F.df) <- MarsDF$catchment
seas.F.df$month <- monthNum
# Prepare and export data frame
seas.F.df2 <- seas.F.df %>%
pivot_longer(cols = -month, names_to = "catchment", values_to = "seas") %>%
left_join(MarsDF %>%
select(catchment, sites,Sig2), by = c("catchment")) %>%
mutate(solute = solute)
seas.F.df2
}
Seas.Ca.df <- seasPlotFun.Unique(12, Seas.Ca, "Ca")
# For catchments
seasPlotFun.Unique <- function(periodS, MarsDF, solute){
# set up sin and cos matrix
# periodS <- 12# TEST
PeriodStart <- 1
PeriodEnd <- periodS
monthNum <- seq(PeriodStart, PeriodEnd, by = 1)
#seas_1 is sin; seas_2 is cos
cos.t <- cos(2 * pi * monthNum/periodS)
sin.t <- sin(2 * pi * monthNum/periodS)
#sin is seas_1, cos is seas_2
c.Four <- rbind(sin.t, cos.t) # if these get switched in C output they have to be switched
# MarsDF <- Seas.SO4.Unique # TEST
coefs <- as.matrix(MarsDF[,c("C_seas_1", "C_seas_2")])
# calculate seasonality
seas.F <- coefs %*% c.Four
seas.F.df <- as.data.frame(t(seas.F))
colnames(seas.F.df) <- MarsDF$catchment
seas.F.df$month <- monthNum
# Prepare and export data frame
seas.F.df2 <- seas.F.df %>%
pivot_longer(cols = -month, names_to = "catchment", values_to = "seas") %>%
left_join(MarsDF %>%
select(catchment, sites,Sig2), by = c("catchment")) %>%
mutate(solute = solute)
seas.F.df2
}
Seas.Ca.df <- seasPlotFun.Unique(12, Seas.Ca, "Ca")
head(Seas.Ca.df)
Seas.Doc <- SeasDatFun.Unique(MarsSeasSiteState[[2]], SitesList_Not4Tdp)
Seas.Doc.df <- seasPlotFun.Unique(12, Seas.Doc, "DOC")
Seas.NH4 <- SeasDatFun.Unique(MarsSeasSiteState[[3]], SitesList_Not4Tdp)
Seas.NH4.df <- seasPlotFun.Unique(12, Seas.NH4, "NH4")
Seas.NO3 <- SeasDatFun.Unique(MarsSeasSiteState[[4]], SitesList_Not4Tdp)
Seas.NO3.df <- seasPlotFun.Unique(12, Seas.NO3, "NO3")
SitesList_4Tdp
Seas.TDP <- SeasDatFun.Unique(MarsSeasSiteState[[5]], SitesList_4Tdp)
Seas.TDP.df <- seasPlotFun.Unique(12, Seas.TDP, "TDP")
Seas.SO4 <- SeasDatFun.Unique(MarsSeasSiteState[[6]], SitesList_Not4Tdp)
head(Seas.SO4)
MARSSinfo("HessianNA")
Seas.SO4.df <- seasPlotFun.Unique(12, Seas.SO4.Site, "SO4")
Seas.SO4.df <- seasPlotFun.Unique(12, Seas.SO4, "SO4")
# join site and catchment DF
Seas.So4.Both.df <- Seas.SO4.Unique.df %>%
full_join(Seas.SO4.Site.df, by = c("sites","solute", "month"), suffix = c("_catch","_sites"))
ggplot() +
geom_line(data = Seas.So4.Both.df,
aes(y = seas_catch, x = month, color = catchment))+
geom_line(data = Seas.So4.Both.df,
aes(y = seas_sites, x = month)) +
# scale_color_brewer(palette = "Set2")+
facet_grid(sites ~.)
head(Seas.SO4)
SeasDat <- rbind(Seas.Ca.df, Seas.Doc.df, Seas.NH4.df, Seas.NO3.df, Seas.TDP.df, Seas.SO4.df) %>%
mutate(sites = fct_relevel(sites, c("HJA", "ELA", "MEF", "TLW", "DOR", "HBEF", "BBWM")),
Sig2 = fct_relevel(Sig2, c("no", "one", "both")),
solute = fct_relevel(solute, c("Ca", "DOC", "NH4", "NO3", "TDP", "SO4")),
#corrected for water year
month2 = ifelse(month == "1", "10",
ifelse(month == "2", "11",
ifelse(month == "3", "12",
ifelse(month == "4", "1",
ifelse(month == "5", "2",
ifelse(month == "6", "3",
ifelse(month == "7", "4",
ifelse(month == "8", "5",
ifelse(month == "9", "6",
ifelse(month == "10", "7",
ifelse(month == "11", "8",
ifelse(month == "12", "9", "blah")))))))))))),
month3 = as.numeric(month2),
# ugh don't know a better way to do this
DateIsh = as.POSIXct(paste0("01-",month3,"-2020"), format = "%d-%m-%Y"),
doy = as.POSIXct(paste0("01-",month3,"-2020"), format = "%j"),
monthName = strftime(paste0("01-",month3,"-2020"), format = "%b"),
solute2 = fct_recode(solute, "Calcium" = "Ca", "Dissolved organic C" = "DOC",
"Ammonium" = "NH4", "Nitrate" = "NO3", "Total dissolved P" = "TDP",
"Sulfate" = "SO4"))
head(SeasDat)
ggplot(SeasDat,
aes(y = seas, x = DateIsh, color = sites, linetype = Sig2)) +
geom_line(size = 1.25) +
scale_color_brewer(palette = "Set2", name = "Sites")+
scale_linetype_manual(values = c("dotted" ,"dashed", "solid"), name = "Significant coef") +
scale_x_datetime(date_labels = "%b") +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab(NULL) +
ylab("Seasonality") +
theme_bw() +
theme(
axis.text = element_text(size = 12),
axis.title.y = element_text(size = 18),
panel.grid.minor = element_blank()
)
ggplot(SeasDat,
aes(y = seas, x = DateIsh, color = sites, linetype = Sig2)) +
geom_line(size = 1.25) +
scale_color_brewer(palette = "Set2", name = "Sites")+
# scale_linetype_manual(values = c("dotted" ,"dashed", "solid"), name = "Significant coef") +
scale_x_datetime(date_labels = "%b") +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab(NULL) +
ylab("Seasonality") +
theme_bw() +
theme(
axis.text = element_text(size = 12),
axis.title.y = element_text(size = 18),
panel.grid.minor = element_blank()
)
head(SeasDat)
SeasDat %>% filter(Sig2 == "blah")
SeasDat <- rbind(Seas.Ca.df, Seas.Doc.df, Seas.NH4.df, Seas.NO3.df, Seas.TDP.df, Seas.SO4.df) %>%
mutate(sites = fct_relevel(sites, c("HJA", "ELA", "MEF", "TLW", "DOR", "HBEF", "BBWM")),
Sig2 = fct_recode(Sig2, "Hessian issues" = "blah"),
Sig2 = fct_relevel(Sig2, c("no", "one", "both")),
solute = fct_relevel(solute, c("Ca", "DOC", "NH4", "NO3", "TDP", "SO4")),
#corrected for water year
month2 = ifelse(month == "1", "10",
ifelse(month == "2", "11",
ifelse(month == "3", "12",
ifelse(month == "4", "1",
ifelse(month == "5", "2",
ifelse(month == "6", "3",
ifelse(month == "7", "4",
ifelse(month == "8", "5",
ifelse(month == "9", "6",
ifelse(month == "10", "7",
ifelse(month == "11", "8",
ifelse(month == "12", "9", "blah")))))))))))),
month3 = as.numeric(month2),
# ugh don't know a better way to do this
DateIsh = as.POSIXct(paste0("01-",month3,"-2020"), format = "%d-%m-%Y"),
doy = as.POSIXct(paste0("01-",month3,"-2020"), format = "%j"),
monthName = strftime(paste0("01-",month3,"-2020"), format = "%b"),
solute2 = fct_recode(solute, "Calcium" = "Ca", "Dissolved organic C" = "DOC",
"Ammonium" = "NH4", "Nitrate" = "NO3", "Total dissolved P" = "TDP",
"Sulfate" = "SO4"))
summary(SeasDat)
SeasDat <- rbind(Seas.Ca.df, Seas.Doc.df, Seas.NH4.df, Seas.NO3.df, Seas.TDP.df, Seas.SO4.df) %>%
mutate(sites = fct_relevel(sites, c("HJA", "ELA", "MEF", "TLW", "DOR", "HBEF", "BBWM")),
Sig2 = fct_recode(Sig2, "Hessian issues" = "blah"),
Sig2 = fct_relevel(Sig2, c("Hessian issues", "no", "one", "both")),
solute = fct_relevel(solute, c("Ca", "DOC", "NH4", "NO3", "TDP", "SO4")),
#corrected for water year
month2 = ifelse(month == "1", "10",
ifelse(month == "2", "11",
ifelse(month == "3", "12",
ifelse(month == "4", "1",
ifelse(month == "5", "2",
ifelse(month == "6", "3",
ifelse(month == "7", "4",
ifelse(month == "8", "5",
ifelse(month == "9", "6",
ifelse(month == "10", "7",
ifelse(month == "11", "8",
ifelse(month == "12", "9", "blah")))))))))))),
month3 = as.numeric(month2),
# ugh don't know a better way to do this
DateIsh = as.POSIXct(paste0("01-",month3,"-2020"), format = "%d-%m-%Y"),
doy = as.POSIXct(paste0("01-",month3,"-2020"), format = "%j"),
monthName = strftime(paste0("01-",month3,"-2020"), format = "%b"),
solute2 = fct_recode(solute, "Calcium" = "Ca", "Dissolved organic C" = "DOC",
"Ammonium" = "NH4", "Nitrate" = "NO3", "Total dissolved P" = "TDP",
"Sulfate" = "SO4"))
ggplot(SeasDat,
aes(y = seas, x = DateIsh, color = sites, linetype = Sig2)) +
geom_line(size = 1.25) +
scale_color_brewer(palette = "Set2", name = "Sites")+
scale_linetype_manual(values = c("dotted" ,"dashed", "longdash", "solid"), name = "Significant coef") +
scale_x_datetime(date_labels = "%b") +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab(NULL) +
ylab("Seasonality") +
theme_bw() +
theme(
axis.text = element_text(size = 12),
axis.title.y = element_text(size = 18),
panel.grid.minor = element_blank()
)
pdf(file = file.path(here::here("plots"), "07p_SeasBySolute.pdf"), height = 8, width = 10)
ggplot(SeasDat,
aes(y = seas, x = DateIsh, color = sites, linetype = Sig2)) +
geom_line(size = 1.25) +
scale_color_brewer(palette = "Set2", name = "Sites")+
scale_linetype_manual(values = c("dotted" ,"dashed", "longdash", "solid"), name = "Significant coef") +
scale_x_datetime(date_labels = "%b") +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab(NULL) +
ylab("Seasonality") +
theme_bw() +
theme(
axis.text = element_text(size = 12),
axis.title.y = element_text(size = 18),
panel.grid.minor = element_blank()
)
dev.off()
head(SeasDat)
ggplot(SeasDat,
aes(y = seas, x = DateIsh, color = catchment, linetype = Sig2)) +
geom_line(size = 1.25) +
scale_color_brewer(palette = "Set2", name = "Sites")+
scale_linetype_manual(values = c("dotted" ,"dashed", "longdash", "solid"), name = "Significant coef") +
scale_x_datetime(date_labels = "%b") +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab(NULL) +
ylab("Seasonality") +
theme_bw() +
theme(
axis.text = element_text(size = 12),
axis.title.y = element_text(size = 18),
panel.grid.minor = element_blank()
)
ggplot(SeasDat,
aes(y = seas, x = DateIsh, color = catchment, linetype = Sig2)) +
geom_line(size = 1.25) +
# scale_color_brewer(palette = "Set2", name = "Sites")+
scale_linetype_manual(values = c("dotted" ,"dashed", "longdash", "solid"), name = "Significant coef") +
scale_x_datetime(date_labels = "%b") +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab(NULL) +
ylab("Seasonality") +
theme_bw() +
theme(
axis.text = element_text(size = 12),
axis.title.y = element_text(size = 18),
panel.grid.minor = element_blank()
)
pdf(file = file.path(here::here("plots"), "07p_SeasBySolute.pdf"), height = 8, width = 10)
ggplot(SeasDat,
aes(y = seas, x = DateIsh, color = catchment, linetype = Sig2)) +
geom_line(size = 1.25) +
# scale_color_brewer(palette = "Set2", name = "Sites")+
scale_linetype_manual(values = c("dotted" ,"dashed", "longdash", "solid"), name = "Significant coef") +
scale_x_datetime(date_labels = "%b") +
facet_wrap(vars(solute2), nrow = 3, ncol = 3) +
xlab(NULL) +
ylab("Seasonality") +
theme_bw() +
theme(
axis.text = element_text(size = 12),
axis.title.y = element_text(size = 18),
panel.grid.minor = element_blank()
)
dev.off()
ggplot(SeasDat,
aes(y = seas, x = DateIsh, color = solute, linetype = Sig2)) +
geom_line(size = 1.25) +
scale_x_datetime(date_labels = "%b") +
xlab(NULL) +
scale_linetype_manual(values = c("dotted" ,"dashed", "solid")) +
scale_color_brewer(palette = "Set2")+
facet_wrap(vars(sites), nrow = 3, ncol = 3) +
theme_bw()
ggplot(SeasDat,
aes(y = seas, x = DateIsh, color = solute, linetype = Sig2)) +
geom_line(size = 1.25) +
scale_x_datetime(date_labels = "%b") +
xlab(NULL) +
scale_linetype_manual(values = c("dotted" ,"dashed", "longdash", "solid")) +
scale_color_brewer(palette = "Set2")+
facet_wrap(vars(sites), nrow = 3, ncol = 3) +
theme_bw()
#STOPPED HERE
save.image("analysis/07_JMHplots_Rdat")
